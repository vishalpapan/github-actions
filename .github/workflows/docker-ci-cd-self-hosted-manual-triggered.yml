name: Docker CI/CD - Self-Hosted Runner

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'examples/docker-app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'examples/docker-app/**'
  workflow_dispatch:  # Manual trigger for testing

env:
  REGISTRY: docker.io
  IMAGE_NAME: vishalpapan/docker-demo-app

jobs:
  code-quality:
    name: Code Quality & Testing (Self-Hosted)
    runs-on: self-hosted  # Key difference: runs on your own infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: |
        cd examples/docker-app
        npm install
    
    - name: Run ESLint
      run: |
        cd examples/docker-app
        npm run lint
    
    - name: Run tests with coverage
      run: |
        cd examples/docker-app
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: examples/docker-app/coverage/lcov.info
        flags: self-hosted-tests
        name: self-hosted-coverage

  security-scan:
    name: Security Analysis (Self-Hosted)
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd examples/docker-app
        npm install
    
    - name: Run npm audit
      run: |
        cd examples/docker-app
        npm audit --audit-level moderate || true
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-and-push:
    name: Build & Push Docker Image (Self-Hosted)
    runs-on: self-hosted
    needs: [code-quality, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=self-hosted-
          type=raw,value=self-hosted-latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: examples/docker-app
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:self-hosted-latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  test-deployment:
    name: Test Docker Image (Self-Hosted)
    runs-on: self-hosted
    needs: build-and-push
    
    steps:
    - name: Test Docker image functionality
      run: |
        echo "Testing Docker image on self-hosted runner: ${{ env.IMAGE_NAME }}:self-hosted-latest"
        
        # Clean up any existing containers
        docker stop test-app-self-hosted || true
        docker rm test-app-self-hosted || true
        
        # Pull and run the image
        docker run --rm -d -p 3001:3000 --name test-app-self-hosted ${{ env.IMAGE_NAME }}:self-hosted-latest
        
        # Wait for app to start
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:3001/health
        
        # Test main endpoint
        echo "Testing main endpoint..."
        curl -f http://localhost:3001/
        
        # Test calculator API
        echo "Testing calculator API..."
        curl -X POST -H "Content-Type: application/json" \
          -d '{"operation":"add","a":10,"b":5}' \
          http://localhost:3001/api/calculate
        
        # Cleanup
        docker stop test-app-self-hosted
        
        echo "Self-hosted runner tests passed!"

  performance-metrics:
    name: Performance Metrics (Self-Hosted)
    runs-on: self-hosted
    needs: [code-quality, security-scan, build-and-push, test-deployment]
    if: success()
    
    steps:
    - name: Collect performance data
      run: |
        echo " Self-Hosted Runner Performance Metrics:"
        echo " Runner OS: $(uname -a)"
        echo " Available Memory: $(free -h | grep '^Mem:' | awk '{print $7}')"
        echo " Available Disk: $(df -h / | tail -1 | awk '{print $4}')"
        echo "ðŸ”§Docker Version: $(docker --version)"
        echo " Node.js Version: $(node --version)"
        echo "Build completed on dedicated infrastructure"
        
    - name: Success notification
      run: |
        echo " Self-hosted pipeline completed successfully!"
        echo " Docker image: ${{ env.IMAGE_NAME }}:self-hosted-latest"
        echo " Executed on: Self-hosted runner"
        echo " Performance: Dedicated resources"
        echo " Security: Private infrastructure"
